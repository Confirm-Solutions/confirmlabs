{
  "hash": "383f0ddab802fbae0b024be2e7ff57a6",
  "result": {
    "markdown": "---\ntitle: A Quarto Page Layout Example\nsubtitle: 'Inspired by Tufte Handout, Using Quarto'\ndate: 6/9/2023\nformat:\n  html:\n    grid:\n      margin-width: 350px\n    code-fold: true\n  ipynb: default\nreference-location: margin\ncitation-location: margin\nbibliography: skeleton.bib\n---\n\n# Introduction\n\nThis document demonstrates the use of a number of advanced page layout features to produce an attractive and usable document inspired by the Tufte handout style and the use of Tufte's styles in RMarkdown documents [@xie2018]. The Tufte handout style is a style that Edward Tufte uses in his books and handouts. Tufte's style is known for its extensive use of sidenotes, tight integration of graphics with text, and well-set typography. Quarto[^1] supports most of the layout techniques that are used in the Tufte handout style for both HTML and LaTeX/PDF output.\n\n[^1]: To learn more, you can read more about [Quarto](https://www.quarto.org) or visit [Quarto's Github repository](https://www.github.com/quarto-dev/quarto-cli).\n\n``` yaml\n---\ntitle: \"An Example Using the Tufte Style\"\nauthor: \"John Smith\"\nformat:\n  html:\n    grid:\n      margin-width: 350px         # <1>\n  pdf: default\nreference-location: margin        # <2>\ncitation-location: margin         # <2>\n---\n```\n\n1.  Increases the width of the margin to make more room for sidenotes and margin figures (HTML only).\n2.  Places footnotes and cited sources in the margin. Other layout options (for example placing a figure in the margin) will be set per element in examples below.\n\nThese layout features are designed with two important goals in mind:\n\n1.  To produce both PDF and HTML output with similar styles from the same Quarto document;\n2.  To provide simple syntax to write elements of the Tufte style such as side notes and margin figures. If you'd like a figure placed in the margin, just set the option `fig-column: margin` for your code chunk, and we will take care of the details for you[^2].\n\n[^2]: You never need to think about `\\begin{marginfigure}` or `<span class=\"marginfigure\">`; the LaTeX and HTML code under the hood may be complicated, but you never need to learn or write such code.\n\nIf you have any feature requests or find bugs in these capabilities, please do not hesitate to file them to <https://github.com/quarto-dev/quarto-cli/issues>.\n\n# Figures\n\n## Margin Figures\n\nImages and graphics play an integral role in Tufte's work. To place figures in the margin you can use the **Quarto** chunk option `column: margin`. For example:\n\n::: {#fig-polar .cell .column-margin execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  figsize=(2,2),\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](post1_files/figure-ipynb/fig-polar-output-1.png){#fig-polar}\n:::\n:::\n\n\nNote the use of the `fig-cap` chunk option to provide a figure caption. You can adjust the proportions of figures using the `fig-width` and `fig-height` chunk options. These are specified in inches, and will be automatically scaled down to fit within the handout margin.\n\n## Arbitrary Margin Content\n\nYou can include anything in the margin by places the class `.column-margin` on the element. See an example on the right about the first fundamental theorem of calculus.\n\n::: column-margin\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n:::\n\n## Full Width Figures\n\nYou can arrange for figures to span across the entire page by using the chunk option `fig-column: page-right`.\n\n::: {#fig-fullwidth .cell .fig-column-page-right fig-height='3' fig-width='11' execution_count=2}\n``` {.python .cell-code}\nx = np.linspace(0, 2, 100)\nplt.figure(figsize=(11,3))\nplt.subplot(1,3,1)\nplt.plot(x, np.cos(x))\nplt.subplot(1,3,2)\nplt.plot(x, np.sin(x))\nplt.subplot(1,3,3)\nplt.plot(x, np.tan(x))\n```\n\n::: {.cell-output .cell-output-display}\n![A full width figure.](post1_files/figure-ipynb/fig-fullwidth-output-1.png){#fig-fullwidth}\n:::\n:::\n\n\nOther chunk options related to figures can still be used, such as `fig-width`, `fig-cap`, and so on. For full width figures, usually `fig-width` is large and `fig-height` is small. In the above example, the plot size is $11 \\times 3$.\n\n## Arbitrary Full Width Content\n\nAny content can span to the full width of the page, simply place the element in a `div` and add the class `column-page-right`. For example, the following code will display its contents as full width.\n\n``` md\n::: {.fullwidth}\nAny _full width_ content here.\n:::\n```\n\nBelow is an example:\n\n::: column-page-right\n*R is free software and comes with ABSOLUTELY NO WARRANTY.* You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see <https://www.gnu.org/licenses/>.\n:::\n\n## Main Column Figures\n\nBesides margin and full width figures, you can of course also include figures constrained to the main column. This is the default type of figures in the LaTeX/HTML output.\n\n::: {#fig-main .cell execution_count=3}\n``` {.python .cell-code}\nx = np.random.normal(size=10000)\nplt.hist(x, bins=100)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A figure in the main column.](post1_files/figure-ipynb/fig-main-output-1.png){#fig-main}\n:::\n:::\n\n\n## Margin Captions\n\nWhen you include a figure constrained to the main column, you can choose to place the figure's caption in the margin by using the `cap-location` chunk option. For example:\n\n::: {#fig-main-margin-cap .cell .caption-undefined execution_count=4}\n``` {.python .cell-code}\nx = np.random.normal(size=10000)\nplt.hist(x, bins=100)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A figure with a longer caption. The figure appears in the main column, but the caption is placed in the margin. Captions can even contain elements like a citation such as @xie2018.](post1_files/figure-ipynb/fig-main-margin-cap-output-1.png){#fig-main-margin-cap}\n:::\n:::\n\n\n# Sidenotes\n\nOne of the most prominent and distinctive features of this style is the extensive use of sidenotes. There is a wide margin to provide ample room for sidenotes and small figures. Any use of a footnote will automatically be converted to a sidenote.\n\n[This is a span that has the class `column-margin` which places it in the margin without the sidenote mark.]{.column-margin} If you'd like to place ancillary information in the margin without the sidenote mark (the superscript number), you can use apply the `column-margin` class to the element.\n\n# References\n\nReferences can be displayed as margin notes for HTML output. For example, we can cite R here [@R-base].\n\n::: {.callout-note appearance=\"simple\"}\nThis feature depends upon `link-citations` to locate and place references in the margin. This is enabled by default, but if you disable `link-citations` then references in the HTML output will be placed at the end of the output document as they normally are.\n:::\n\n# Tables\n\n::: {#tbl-planets #tbl-planets .cell tbl-cap='Planets' execution_count=5}\n``` {.python .cell-code}\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"Sun\",696000,1989100000],\n         [\"Earth\",6371,5973.6],\n         [\"Moon\",1737,73.5],\n         [\"Mars\",3390,641.85]]\nMarkdown(tabulate(\n  table, \n  headers=[\"Planet\",\"R (km)\", \"mass (x 10^29 kg)\"]\n))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\nPlanet      R (km)    mass (x 10^29 kg)\n--------  --------  -------------------\nSun         696000           1.9891e+09\nEarth         6371        5973.6\nMoon          1737          73.5\nMars          3390         641.85\n:::\n:::\n\n\n# Responsiveness\n\nThe HTML page layout is responsive- as the page width shrinks, elements will automatically adjust their position. Elements that appear in the margins will move inline with the content and elements that span the body and margin will automatically span only the body.\n\n# Some Notes on Page Layout\n\nTo see the Quarto markdown source of this example document, you may follow [this link to Github](https://raw.githubusercontent.com/quarto-dev/quarto-gallery/main/page-layout/tufte.qmd).\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n---\n",
    "supporting": [
      "post1_files/figure-ipynb"
    ],
    "filters": []
  }
}