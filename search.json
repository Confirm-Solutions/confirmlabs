[
  {
    "objectID": "posts/catalog.html",
    "href": "posts/catalog.html",
    "title": "A catalog of several million tasks Pythia can do.",
    "section": "",
    "text": "We’re sharing datasets that we hope will be useful for language model interpretability."
  },
  {
    "objectID": "posts/catalog.html#the-data",
    "href": "posts/catalog.html#the-data",
    "title": "A catalog of several million tasks Pythia can do.",
    "section": "The data",
    "text": "The data\nIn following sections we will give details on the construction and statistics of these datasets. Before continuing, we share some interactive data previews:\n\nDeletion: the first 25000 rows of pile_scan_4.\nBigrams: the entirety of pile_top_bigrams, which contains bigrams with suffix probability greater than 50%.\nTrigrams: the first 25000 rows of pile_top_trigrams, which contains trigrams with suffix probability greater than 50% and count greater than 1000.\n\n\nDeletionBigramsTrigrams\n\n\nThe columns of the table below:\n\ntext: the two prompts provided. The additional token of backwards context is surrounded by square brackets. The example in the introduction would be written \"[_chloride],_or_common_table\".\ntoken_short: the most likely next token predicted by Pythia-2.8B for the four token prompt.\ntoken_long: the most likely next token predicted by Pythia-2.8B for the five token prompt.\np_short: the probability Pythia-2.8B assigns to token_short.\np_long: the probability Pythia-2.8B assigns to token_long.\nJS: the Jensen-Shannon divergence between the model’s output distributions for the four and five token prompts.\n\nNote:\n\nin the table, spaces are replaced with underscores for clarity.\nthere are offensive tokens in the dataset. We have not removed them.\n\n\n\n\n\n\n\n\n\n\ntext\ntoken_short\ntoken_long\np_short\np_long\nJS\n\n\n\n\nLoading... (need help?)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe table below shows bigram completions in The Pile sorted by the frequency of occurence of the prefix token:\n\ntoken#: the tokens of the bigram.\nsum_count: the number of times the first token of the bigram occurs in The Pile.\nfrac_max: the fraction of first token appearances that are followed by the most common bigram completion. For example, 50.3% of the time the model sees \" need\", the correct next token is \" to\".\np_2.8b: the probability Pythia-2.8B assigns to the most likely completion token when prompted with just the prefix token.\n\nNote:\n\nin the table, spaces are replaced with underscores for clarity.\nthere are offensive tokens in the dataset. We have not removed them.\n\n\n\n\n\n\n\n\n\n\ntoken0\ntoken1\nsum_count\nfrac_max\np_2.8b\n\n\n\n\nLoading... (need help?)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe table below shows trigram completions in The Pile sorted by the frequency of occurence of the prefix bigram:\n\ntoken#: the tokens of the trigram.\nsum_count: the number of times the prefix bigram occurs in The Pile.\nfrac_max: the fraction of bigram appearances that are followed by the most common third token. For example, when prompted with the tokens [\"://\", \"www\"], 99.4% of the time, the next token is \".\".\np_2.8b: the probability Pythia-2.8B assigns to the most likely completion token when prompted with the prefix bigram.\n\nNote:\n\nin the table, spaces are replaced with underscores for clarity.\nthere are offensive tokens in the dataset. We have not removed them.\n\n\n\n\n\n\n\n\n\n\ntoken0\ntoken1\ntoken2\nsum_count\nfrac_max\np_2.8b\n\n\n\n\nLoading... (need help?)"
  },
  {
    "objectID": "posts/catalog.html#bigrams-and-trigrams",
    "href": "posts/catalog.html#bigrams-and-trigrams",
    "title": "A catalog of several million tasks Pythia can do.",
    "section": "Bigrams and Trigrams",
    "text": "Bigrams and Trigrams\nTo construct bigram and trigram statistics, we process the entire deduplicated Pile.\nWe share six datasets on Huggingface. Descriptions of the datasets are available in the linked dataset cards:\n\npile_bigrams: Raw bigram statistics:\n\n479 million unique bigrams.\n\npile_bigram_prefixes: All bigram prefixes with their most common completion token.\n\n50,054 unique bigram prefixes (one row for each unique token).\n\npile_top_bigrams: Those bigram prefixes for which the most common completion has &gt; 50% probability. We add Pythia’s probability of the most frequent completion for each Pythia model.\n\n3,448 such bigram prefixes. All of these are available to browse on this page above.\n\npile_trigrams: Raw trigram statistics.\n\n9.9 billion unique trigrams.\n\npile_trigram_prefixes: All trigram prefixes with their most common completion token.\n\n479 million unique trigram prefixes (equivalent to bigrams).\n\npile_top_trigrams: Those trigram prefixes for which the most common completion has &gt; 50% probability and where the prefix occurs more than 1000 times in The Pile. We add Pythia’s probability of the most frequent completion for each Pythia model.\n\n1,542,074 such trigram prefixes. The top 25k are available to browse on this page above.\n\n\nBelow, we show the memorization rates for each Pythia model on the pile_top_bigrams and pile_top_trigrams datasets. Since these datasets have been filtered to cases where the most common completion has &gt; 50% probability, we hope to see models predicting the most common completion with high probability. Larger models perform better, but even Pythia-12B is miscalibrated on 20% of the bigrams and 45% of the trigrams when we ask for prediction of \\(p \\geq 0.45\\).\n\n\n\n\n\n\n\n\n\nUsage notes:\n\nBecause the byte-pair encoding tokenizer from GPT-NeoX [3] was trained on The Pile, there are no single tokens in The Pile where the subsequent token is 100% predictable. However, there are many trigrams that are 100% predictable.\nSome whitespace token bigrams will also tokenize as a single token. For example, with the GPT-NeoX tokenizer, \"\\n\\n\\t\\t\" is a token, \"\\t\" is a token and \"\\n\\n\\t\\t\\t\" is also token. It’s important to be aware of this when automatically tokenizing many prompts because almost all concatenated bigrams will tokenize to two tokens but a few whitespace-related bigrams will tokenize to one token. We have not removed these bigrams from the dataset. This white space tokenization is discussed in Appendix F of [3]."
  },
  {
    "objectID": "posts/catalog.html#first-token-deletion",
    "href": "posts/catalog.html#first-token-deletion",
    "title": "A catalog of several million tasks Pythia can do.",
    "section": "First token deletion",
    "text": "First token deletion\nIf deleting the first token of a prompt gives a dramatically different output from a language model, then something interpretable may be going on. For example, consider the prompt, \", or common table\". Given this prompt, Pythia-2.8B predicts the most likely next token is \" expression\" with probability 0.37. Next, we provide an additional token of context in the backwards directions with the prompt, \" chloride, or common table\". Then, the model correctly predicts \" salt\" with probability 0.99.\nWe scan through the pre-training corpus \\({t_0,...,t_N}\\) and compare the output of the model on pairs of prompts:\n\n\\(p_0 = [t_i, ... t_{i + n}]\\) is a contiguous \\(n\\)-token prompt from the pre-training corpus.\n\\(p_1 = [t_{i-1}, t_i, ... t_{i + n}]\\) is an \\((n+1)\\)-token prompt where an additional token, \\(t_{i-1}\\) has been added in the backwards direction in the text.\n\nSuppose \\(M(p)\\) is a model than outputs a probability distribution over output tokens. When \\(M(p_1)\\) differs substantially from \\(M(p_0)\\), we capture the two prompts as a “task”. To be more precise, we accept the task if:\n\\[\\mathrm{JSD}(M(p_0), M(p_1)) &gt; 0.5 ~~~~\\mathrm{and}~~~~ \\max_{i} M(p_1)_i &gt; 0.5\\]\nwhere JSD is the Jensen-Shannon Divergence. This criterion means that we focus on tasks for which the addition of \\(t_{i-1}\\) to the prompt has a large influence and results in a confident prediction. Note that the true next token \\(t_{i + n + 1}\\) does not factor into these criteria and therefore the correctness of the model’s predictions does not affect whether we consider the model to be “completing a task”.\nWe share 1,874,497 tasks produced by prompt scanning with Pythia-2.8B for every sliding 5-token prompt in the first 112.5M tokens of the Pile. The dataset is available on Huggingface: pile_scan_4\n\n\n\nn = 4 for this dataset, meaning that we provide an initial 4-token prompt and then add a single token to the beginning of the prompt for the second 5-token prompt.\nfor 1,067,168 tasks, the most likely token is the same for both prompts. Often the model will become much more confident of its initial prediction after seeing the additional token.\nfor 807,329 tasks, the predicted tokens are different.\n\n\n\nScaling this method to the entire Pile would probably result in a several hundred million such tasks."
  },
  {
    "objectID": "posts/catalog.html#github",
    "href": "posts/catalog.html#github",
    "title": "A catalog of several million tasks Pythia can do.",
    "section": "GitHub",
    "text": "GitHub\nThe code to reproduce the datasets here is available at: https://github.com/Confirm-Solutions/catalog"
  },
  {
    "objectID": "posts/TDC2023.html",
    "href": "posts/TDC2023.html",
    "title": "Takeaways from the NeurIPS 2023 Trojan Detection Competition",
    "section": "",
    "text": "This post summarizes our team’s takeaways as participants in the NeurIPS 2023 Trojan Detection Competition. Since we won one of the competition tracks, we have been invited to contribute to the joint competition paper. Here, we share our personal opinions and takeaways from the event."
  },
  {
    "objectID": "posts/TDC2023.html#footnotes",
    "href": "posts/TDC2023.html#footnotes",
    "title": "Takeaways from the NeurIPS 2023 Trojan Detection Competition",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWhile an unintended trigger might exist in the base model, many unintended triggers are a side effect of the training process for inserting the intended triggers.↩︎\nThe “residual stream” at layer L↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Confirm",
    "section": "",
    "text": "Takeaways from the NeurIPS 2023 Trojan Detection Competition\n\n\nSummarizing our takeaways from TDC2023\n\n\n\nZygimantas Straznickas, T. Ben Thompson, Michael Sklar\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n6 Ways to Fight the Interpretability Illusion\n\n\nNotes on using optimization and causal models for interpretability.\n\n\n\nMichael Sklar\n\n\nNov 30, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nA catalog of several million tasks Pythia can do.\n\n\n\n\n\n\nT. Ben Thompson, Michael Sklar\n\n\nJun 25, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/fight_the_illusion.html",
    "href": "posts/fight_the_illusion.html",
    "title": "6 Ways to Fight the Interpretability Illusion",
    "section": "",
    "text": "Recommended pre-reading:\n\nGeiger et al.’s DAS and Boundless DAS.\nAn Interpretability Illusion for Activation Patching of Arbitrary Subspaces.\nThe corresponding ICLR paper, “Is This the Subspace You Are Looking For?”\n\n\nThis post is motivated by Lange, Makelov, and Nanda’s LessWrong post Interpretability Illusion for Activation Patching and ICLR paper. They study Geiger et al’s DAS method, which uses optimization to identify an abstracted causal model with a small subset of dimensions in a neural network’s residual stream or internal MLP layer. Their results show that DAS can, depending on the situation, turn up both “correct” and “spurious” findings on the train-set. From the investigations in the ICLR paper and conversations with a few researchers, my understanding is these “spurious” directions have not performed well on held-out generalization sets, so in practice it is easy to distinguish the “illusions” from “real effects”. But, I am interested in developing even stronger optimize-to-interpret methods. With more powerful optimizers, illusion effects should be even stronger, and competition from spurious signals may make true signals harder to locate in training. So, here are 6 possible ways to fight against the interpretability illusion. Most of them can be tried in combination.\n\nThe causal model still holds, and may still be what we want.: We call it an interpretability illusion because we are failing to describe the model’s normal functioning. But unusual functioning is fine for some goals! Applications include:\n\nFinding latent circuits which might be targetable by optimized non-routine inputs. For example, these circuits might be used in an adversarial attack.\n“Pinning” a false belief into the model, for testing or alignment training. For example, forcing the model to believe it is not being watched, in order to test deception or escape behavior.\n\nThe key point is that the interpretability illusion is a failure to describe typical model operation, but a success for enacting the causal model.\nStudy more detailed causal models with multiple output streams, multiple options for the input variables, or more compositions. To start, notice that it is obviously good to have more outputs/consequences of the causal mode in the optimization. Why? First, if we have multiple output-measurements at the end of the causal graph, it is harder for a spurious direction to perform well on all of them by chance. Additionally, if an abstract causal model has modular pieces, then there should be exponentially many combinatorial-swap options that we can test. To score well on the optimization’s training-loss across all swaps (in the language of DAS this is a high “IIA”), the spurious structure would have to be very sophisticated. While Lange et al. show that spurious solutions may arise for searches in 1 direction, it should be less likely to occur for pairs of directions, and less likely yet for full spurious circuits. So, illusion problems may be reduced by scaling up the complexity of the causal model. Some possible issues remain, though:\n\nIn some cases we may struggle to identify specific directions within a multi-part model; i.e., we might find convincing overall performance for a circuit, but an individual dimension or two could be spurious, and we might be unable to determine exactly which.\nThis approach relies on big, deep, abstract causal models existing inside the networks, with sufficient robustness in their functioning across variable changes. There is some suggestive work on predictable / standardized structures in LLM’s, from investigations like Feng and Steinhardt (2023)’s entity binding case study, the indirect object identification (IOI) paper, and studies of recursive tasks. However, the consistency/robustness and DAS-discoverability of larger structures in scaled-up models is not yet clear. More case studies in larger models would be valuable.\n\nMeasure generalizability, and use it to filter out spurious findings after-the-fact. This is just common-sense, and researchers are already doing this in several ways. We can construct train/test splits with random sampling, and conclude a found direction is spurious if it does not generalize on the test data; or we could ask how the patched model generalizes out-of-training-distribution following a small perturbation, such as adding extra preceding tokens. Spurious solutions are likely to be sensitive to minor changes, and for many purposes we are primarily interested in causal models that generalize well. As mentioned earlier, the ICLR paper’s `spurious’ findings performed sufficiently poorly on generalization sets that they could easily be distinguished from real effects.\nQuantify a null distribution. In the “Illusion” post, Lange et al. show that the strength of the spurious signal depends on how many neurons it is allowed to optimize over. So, a very strong signal, taken over a small optimization set, should be more convincing. Thinking as statisticians, we could attempt to construct a null distribution for the spurious signals; this approach could offer evidence that a causal map element is being represented at all. We can do this inference for individual pieces of a larger causal model, with each component having its own uncertainty.\nUse unsupervised feature extraction as a first step. Recent interpretability work with auto-encoders (Bricken et al. 2023, Cunningham et al. 2023) suggests that many of a small transformer’s most important features can be identified. If this technique scales well, it could vastly reduce the amount of optimization pressure needed to identify the right directions, shrinking the search space and reducing optimistic bias and spurious findings.\nIncorporate additional information as a prior / penalty for optimization. As Lange et al. note in the “Illusion” post, and as described in Section 5 of the ICLR paper, it is possible to supply additional evidence that a found direction is faithful or not. In the case study with the IOI task, they argued the direction found by DAS on a residual layer fell within the query subspace of human-identified name mover heads. More generally, if intuitions about faithfulness can be scored with a quantitative metric, then tacking that metric onto the optimization as a penalty should help the optimizer favor correct directions over spurious solutions. Still, using this approach requires answering two difficult questions: what additional evidence to choose, and then how to quantify it? Some rough possibilities:\n\nIf we know of structures that should be related to the task, such as entity bindings (Feng and Steinhardt (2023)), we can try to build outwards from them; or if we have a reliable feature dictionary from sparse auto-encoders or “belief graph” per Hase et al. 2021 which offers advance predictions for how subsequent layers’ features may react to a change, we can penalize lack of correlation or causal effects on downstream features.\nSomehow use the basic structure of the network to quantify which directions are ‘dormant.’ Although this sounds simple, I am unsure how to do it, given the indeterminacy of what a ‘dormant’ direction even means (this issue is described in Lange et al.’s lesswrong post, Appendix section: the importance of correct model units.)\nPerhaps next-gen AI will offer accurate “auto-grading”, giving a general yet quantitative evaluation of plausibility of found solutions\n\nUsing extra information in this way unfortunately spends its usability for validation. But preventing the optimization from getting stuck on spurious signals may be the higher priority.\n\n\nThanks to Atticus Geiger, Jing Huang, Zhengxuan Wu, Ben Thompson, Zygimantas Straznickas and others for conversations and feedback on earlier drafts.\n\n\n\nCitationBibTeX citation:@online{sklar2023,\n  author = {Sklar, Michael},\n  title = {6 {Ways} to {Fight} the {Interpretability} {Illusion}},\n  date = {2023-11-30},\n  url = {https://confirmlabs.org/posts/fight_the_illusion.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nM.\nSklar, “6 Ways to Fight the Interpretability Illusion,”\nNov. 30, 2023. https://confirmlabs.org/posts/fight_the_illusion.html"
  }
]